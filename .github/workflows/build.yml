name: "build"

on:
  push:
    branches:
      - master
    tags:
      - "v*"

env:
  GH_REGISTRY: "ghcr.io"
  DOCKER_HUB_REGISTRY: "docker.io"
  GH_USER: "${{ github.actor }}"
  DOCKER_HUB_USER: "${{ secrets.DOCKER_HUB_USER }}"
  IMAGE_NAME: "${{ github.event.repository.name }}"

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Set env vars"
        run: |
          echo "GITHUB_SHA_SHORT=$(echo ${GITHUB_SHA} | cut -c1-8)" >> "${GITHUB_ENV}"
          echo "REFNAME=$(echo "${{ github.ref }}" | sed -e 's/.*\///')" >> "${GITHUB_ENV}"
          echo "VERSION=$(echo "${{ github.ref }}" | sed -e 's/.*\///')" >> "${GITHUB_ENV}"
          echo "GH_IMAGE_NAME=$(echo "${{ env.GH_REGISTRY }}/${{ env.GH_USER }}/${{ env.IMAGE_NAME }}")" >> "${GITHUB_ENV}"
          echo "DOCKER_HUB_IMAGE_NAME=$(echo "${{ env.DOCKER_HUB_REGISTRY }}/${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}")" >> "${GITHUB_ENV}"

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: "v1.13.1"

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      - name: "Login to github container registry"
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: "${{ env.GH_REGISTRY }}"
          username: "${{ env.GH_USER }}"
          password: "${{ secrets.CR_PAT }}"

      - name: "Login to docker hub container registry"
        if: "contains(github.ref, 'refs/tags')"
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: "${{ env.DOCKER_HUB_REGISTRY }}"
          username: "${{ env.DOCKER_HUB_USER }}"
          password: "${{ secrets.DOCKER_HUB_TOKEN }}"

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata (if not a tag)
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        if: "!contains(github.ref, 'refs/tags')"
        with:
          images: |
            ${{ env.GH_IMAGE_NAME }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata (if not a tag)
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        if: "!contains(github.ref, 'refs/tags')"
        with:
          images: |
            ${{ env.GH_IMAGE_NAME }}
            ${{ env.DOCKER_HUB_IMAGE_NAME }}

      - name: "Build image ${{ env.GH_IMAGE_NAME }} ${{ env.GITHUB_SHA_SHORT }}"
        uses: docker/build-push-action@v2
        with:
          push: true
          no-cache: true
          tags: ${{ env.GH_IMAGE_NAME }}:${{ env.REFNAME }},${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}

      - name: "Tag using git version"
        run: |
          docker tag "${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}" "${{ env.DOCKER_HUB_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}"
          docker push "${{ env.DOCKER_HUB_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}"

      - name: "Tag using tag version"
        if: "contains(github.ref, 'refs/tags')"
        run: |
          docker tag "${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}" "${{ env.GH_IMAGE_NAME }}:latest"
          docker tag "${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}" "${{ env.DOCKER_HUB_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}"
          docker tag "${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}" "${{ env.DOCKER_HUB_IMAGE_NAME }}:${{ env.REFNAME }}"
          docker tag "${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}" "${{ env.DOCKER_HUB_IMAGE_NAME }}:latest"
          docker push "${{ env.GH_IMAGE_NAME }}:latest"
          docker push "${{ env.DOCKER_HUB_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}"
          docker push "${{ env.DOCKER_HUB_IMAGE_NAME }}:${{ env.REFNAME }}"
          docker push "${{ env.DOCKER_HUB_IMAGE_NAME }}:latest"

      - name: "Extract executable"
        run: docker cp $(docker create "${{ env.GH_IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}"):/dudumper .

      - name: "Upload dudumper artifact"
        uses: "actions/upload-artifact@v2"
        with:
          name: "dudumper"
          path: "dudumper"

      - name: "Create release"
        if: "contains(github.ref, 'refs/tags')"
        id: "create_release"
        uses: "actions/create-release@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          tag_name: "${{ github.ref }}"
          release_name: "Release ${{ github.ref }}"
          draft: false
          prerelease: false

      - name: "Upload Release Asset"
        if: "contains(github.ref, 'refs/tags')"
        id: "upload-release-asset"
        uses: "actions/upload-release-asset@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          upload_url: "${{ steps.create_release.outputs.upload_url }}"
          asset_path: "./dudumper"
          asset_name: "dudumper"
          asset_content_type: "application/octet-stream"

      # - name: "Build image ${{ env.IMAGE_NAME }} ${{ env.GITHUB_SHA_SHORT }} (old kernel)"
      #   uses: docker/build-push-action@v2
      #   with:
      #     file: Dockerfile-oldkernel
      #     push: true
      #     no-cache: true
      #     tags: ${{ env.IMAGE_NAME }}:oldkernel,${{ env.IMAGE_NAME }}:oldkernel-${{ env.GITHUB_SHA_SHORT }}
 
      # - name: "Tag using tag version (old kernel)"
      #   if: "contains(github.ref, 'refs/tags')"
      #   run: |
      #     docker tag "${{ env.IMAGE_NAME }}:oldkernel" "${{ env.IMAGE_NAME }}:oldkernel-${{ env.REFNAME }}"
      #     docker push "${{ env.IMAGE_NAME }}:oldkernel-${{ env.REFNAME }}"

      # - name: "Extract executable"
      #   run: docker cp $(docker create "${{ env.IMAGE_NAME }}:oldkernel"):/dudumper ./dudumper-oldkernel

      # - name: "Upload dudumper artifact"
      #   uses: "actions/upload-artifact@v2"
      #   with:
      #     name: "dudumper-oldkernel"
      #     path: "dudumper-oldkernel"
 
      # - name: "Upload Release Asset"
      #   if: "contains(github.ref, 'refs/tags')"
      #   id: "upload-release-asset-oldkernel"
      #   uses: "actions/upload-release-asset@v1"
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      #   with:
      #     upload_url: "${{ steps.create_release.outputs.upload_url }}"
      #     asset_path: "./dudumper-oldkernel"
      #     asset_name: "dudumper-oldkernel"
      #     asset_content_type: "application/octet-stream"
